---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "api"
  annotations: {
    reloader.stakater.com/auto: "true",
    # <K8S_ROLE_MAPPING>: "arn:aws:iam::<CLOUD_ACCOUNT>:role/<CLUSTER_NAME>-<WL_NAME>-backend-role"
  }
  labels: {
    "cg-devx.metadata.service": "<WL_NAME>-api"
    # <ADDITIONAL_LABELS>
  }
spec:
  replicas: 1
  selector:
    matchLabels:
      "cg-devx.metadata.service": "<WL_NAME>-api"
  template:
    metadata:
      labels:
        "cg-devx.metadata.service": "<WL_NAME>-api"
    spec:
      serviceAccountName: api
      imagePullSecrets:
        - name: docker-config-wl
      containers:
        - name: "api-container"
          envFrom:
            - configMapRef:
                name: "api"
            - secretRef:
                name: "api"
          imagePullPolicy: IfNotPresent
          image: "<REGISTRY_URL>/<WL_NAME>/api"
          livenessProbe:
            httpGet:
              path: /livez
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /readyz
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
            timeoutSeconds: 30
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          resources:
            limits:
              cpu: 100m
              memory: "128Mi"
            requests:
              cpu: 40m
              memory: "64Mi"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "api-tenant"
  annotations: {
    reloader.stakater.com/auto: "true",
    # <K8S_ROLE_MAPPING>: "arn:aws:iam::<CLOUD_ACCOUNT>:role/<CLUSTER_NAME>-<WL_NAME>-backend-role"
  }
  labels: {
    "cg-devx.metadata.service": "<WL_NAME>-api-tenant"
    # <ADDITIONAL_LABELS>
  }
spec:
  replicas: 1
  selector:
    matchLabels:
      "cg-devx.metadata.service": "<WL_NAME>-api-tenant"
  template:
    metadata:
      labels:
        "cg-devx.metadata.service": "<WL_NAME>-api-tenant"
    spec:
      serviceAccountName: api-tenant
      imagePullSecrets:
        - name: docker-config-wl
      containers:
        - name: "api-tenant-container"
          envFrom:
            - configMapRef:
                name: "api-tenant"
            - secretRef:
                name: "api-tenant"
          imagePullPolicy: IfNotPresent
          image: "<REGISTRY_URL>/<WL_NAME>/api-tenant"
          livenessProbe:
            httpGet:
              path: /livez
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 1
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /readyz
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
            timeoutSeconds: 30
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          resources:
            limits:
              cpu: 100m
              memory: "128Mi"
            requests:
              cpu: 40m
              memory: "64Mi"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "web-client"
  annotations: {
    reloader.stakater.com/auto: "true",
    # <K8S_ROLE_MAPPING>: "arn:aws:iam::<CLOUD_ACCOUNT>:role/<CLUSTER_NAME>-<WL_NAME>-frontend-role"
  }
  labels: {
    "cg-devx.metadata.service": "<WL_NAME>-web-client"
    # <ADDITIONAL_LABELS>
  }
spec:
  replicas: 1
  selector:
    matchLabels:
      "cg-devx.metadata.service": "<WL_NAME>-web-client"
  template:
    metadata:
      labels:
        "cg-devx.metadata.service": "<WL_NAME>-web-client"
    spec:
      serviceAccountName: web-client
      imagePullSecrets:
        - name: docker-config-wl
      containers:
        - name: "web-client-container"
          envFrom:
            - configMapRef:
                name: "web-client"
            - secretRef:
                name: "web-client"
          imagePullPolicy: IfNotPresent
          image: "<REGISTRY_URL>/<WL_NAME>/web-client"
          livenessProbe:
            httpGet:
              path: /livez
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 1
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /readyz
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
            timeoutSeconds: 30
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
            limits:
              cpu: 100m
              memory: "128Mi"
            requests:
              cpu: 40m
              memory: "64Mi"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "web-tenant-admin"
  annotations: {
    reloader.stakater.com/auto: "true",
    # <K8S_ROLE_MAPPING>: "arn:aws:iam::<CLOUD_ACCOUNT>:role/<CLUSTER_NAME>-<WL_NAME>-frontend-role"
  }
  labels: {
    "cg-devx.metadata.service": "<WL_NAME>-web-tenant-admin"
    # <ADDITIONAL_LABELS>
  }
spec:
  replicas: 1
  selector:
    matchLabels:
      "cg-devx.metadata.service": "<WL_NAME>-web-tenant-admin"
  template:
    metadata:
      labels:
        "cg-devx.metadata.service": "<WL_NAME>-web-tenant-admin"
    spec:
      serviceAccountName: web-tenant-admin
      imagePullSecrets:
        - name: docker-config-wl
      containers:
        - name: "web-tenant-admin-container"
          envFrom:
            - configMapRef:
                name: "web-tenant-admin"
            - secretRef:
                name: "web-tenant-admin"
          imagePullPolicy: IfNotPresent
          image: "<REGISTRY_URL>/<WL_NAME>/web-tenant-admin"
          livenessProbe:
            httpGet:
              path: /livez
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 1
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /readyz
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
            timeoutSeconds: 30
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
            limits:
              cpu: 100m
              memory: "128Mi"
            requests:
              cpu: 40m
              memory: "64Mi"
