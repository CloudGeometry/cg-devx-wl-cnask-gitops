apiVersion: v1
kind: ServiceAccount
metadata:
  name: api
  labels: {}
  annotations:
    argocd.argoproj.io/sync-wave: "-5"
    # <K8S_ROLE_MAPPING>: "arn:aws:iam::<ACCOUNT_ID>:role/<PRIMARY_CLUSTER_NAME>-<WL_NAME>-backend-role"
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: "api"
  annotations:
    argocd.argoproj.io/sync-wave: "-5"
rules:
# example of policy rules
  - apiGroups: [apps]
    resources: [deployments, statefulsets]
    verbs: [get, watch, list]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: "api"
  annotations:
    argocd.argoproj.io/sync-wave: "-5"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "api"
subjects:
  - kind: ServiceAccount
    name: "api"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: api-tenant
  labels: {}
  annotations:
    argocd.argoproj.io/sync-wave: "-5"
    # <K8S_ROLE_MAPPING>: "arn:aws:iam::<ACCOUNT_ID>:role/<PRIMARY_CLUSTER_NAME>-<WL_NAME>-backend-role"
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: "api-tenant"
  annotations:
    argocd.argoproj.io/sync-wave: "-5"
rules:
# example of policy rules
  - apiGroups: [apps]
    resources: [deployments, statefulsets]
    verbs: [get, watch, list]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: "api-tenant"
  annotations:
    argocd.argoproj.io/sync-wave: "-5"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "api-tenant"
subjects:
  - kind: ServiceAccount
    name: "api-tenant"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: web-client
  labels: {}
  annotations:
    argocd.argoproj.io/sync-wave: "-5"
    # <K8S_ROLE_MAPPING>: "arn:aws:iam::<ACCOUNT_ID>:role/<PRIMARY_CLUSTER_NAME>-<WL_NAME>-frontend-role"
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: "web-client"
  annotations:
    argocd.argoproj.io/sync-wave: "-5"
rules:
# example of policy rules
  - apiGroups: [apps]
    resources: [deployments, statefulsets]
    verbs: [get, watch, list]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: "web-client"
  annotations:
    argocd.argoproj.io/sync-wave: "-5"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "web-client"
subjects:
  - kind: ServiceAccount
    name: "web-client"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: web-tenant-admin
  labels: {}
  annotations:
    argocd.argoproj.io/sync-wave: "-5"
    # <K8S_ROLE_MAPPING>: "arn:aws:iam::<ACCOUNT_ID>:role/<PRIMARY_CLUSTER_NAME>-<WL_NAME>-frontend-role"
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: "web-tenant-admin"
  annotations:
    argocd.argoproj.io/sync-wave: "-5"
rules:
# example of policy rules
  - apiGroups:
      - apps
    resources:
      - deployments
      - statefulsets
    verbs:
      - get
      - watch
      - list
  - apiGroups:
      - ''
    resources:
      - secrets
      - configmaps
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: "web-tenant-admin"
  annotations:
    argocd.argoproj.io/sync-wave: "-5"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "web-tenant-admin"
subjects:
  - kind: ServiceAccount
    name: "web-tenant-admin"